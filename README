	Техническое задание

   1.Внешние спецификации:

1.1 Условие задачи(общие требования)
Создайте чат со следующим функционалом:

-консольная программа
-регистрация пользователей - логин, пароль, имя
-вход в чат по логину/паролю
-отправка сообщений конкретному пользователю
-обмен сообщениями между всеми пользователями чата одновременно

1.2 Уточнение работы программы

Создаются 2 приложения - клиент и сервер

Запускается сначала серверное приложение, затем клиентское(без параметров - подключение с авторизацией и затем пересылкой сообщений),
либо с ключом командной строки -r (регистрация)

для клиентского приложения в том же каталоге должен быть конфигурационный файл с именем client.dat, 
где находятся данные для авторизации и регистрации
(в формате текстового файла с разделителем \r\n после каждой строки)
Строки: 
-логин
-пароль
-имя пользователя

Для серверного приложения в том же каталоге должен быть конфигурационный файл с именем serverdb.dat, 
где находятся база данных с логинами и паролями всех пользователей
(в формате текстового файла с разделителем \r\n после каждой строки)
Строки последовательно для каждого пользователя: 
-логин
-пароль
-имя пользователя

Консольный пользовательский интерфейс клиента в режиме чата с авторизацией:
Выдается меню:
[Enter command(S-send msg, W-show msgs, q-quit)]
вводится команда:
 S - отправка сообщения другому клиенту,
   следующей строкой вводится логин
   следующей строкой вводится сообщение
 W - вывод всех клиентов и для каждого - вывод списка принятых(>>>) и отправленных(<<<) сообщений,
 q - выход из программы

Сервер имеет также возможность ввода консольной команды (q - завершает работу сервера)

Если клиент, которому отправляется сообщение, не подключен к серверу, то сообщения для него кэшируются,
а затем, когда он подключается, выдаются ему после авторизации,
при кешировании создается файл с именем msgs-<login>.dat, после отправки сообщений он удаляется


   2.Внутренние спецификации:

2.1 общее описание
2 исполняемых файла - клиентское и серверное приложение, клиентское приложение подключается к серверному 
через сокет

сокеты реализованы в виде библиотеки с классами клиентский и серверный сокет 
и функцией подключения к серверу(connect) (файл kkoSocket.h)

для работы с файлами использованы стандартные ф-ции cstdlib


В клиенте используется:
  нити:
   -главная нить -для регистрации и авторизации и меню пользователя с выводом сообщений и командой отправки
сообщения.
   -дополнительная нить - для приема сообщений
  структуры данных:
   - map<string,clientstruct*>

В сервере используются:
  нити:
   -главная нить -для приема входящих соединений и процедур авторизации и регистрации
   -для каждого подключенного клиента: нить обработки сообщений, приходящих от клиента
   -нить с консольным интерфейсом(команда завершения работы сервера)
  структуры данных:
   - map<string,serverstruct*>

Для нитей - std::thread, 
для синхронизации - std::mutex, kkoSemaphore

2.2 Описание сетевого протокола

Регистрация:

клиент посылает строки:
  R
  логин
  пароль
  ФИО

ответ сервера
  строка "ok" или "err"

Авторизация и пересылка сообщений

клиент посылает строки:
  A
  логин
  пароль

ответ сервера
  строка "ok" или "err"

  список пользователей в формате: 
    логин
    ФИО
  после чего идет пустая строка, означающая конец списка

после чего сервер присылает клиенту сообщения в формате :
  логин пользователя, от которого пришло сообщение
  сообщение 

а клиент отправляет сообщения в формате:
  строка "S"
  логин пользователя, кому отправляется сообщение
  сообщение
 
2.3 Описание функций и классов

Сервер:

класс chatserver
  метод run1 - заполнение структыры данных типа map из базы,
открытие серверного сокета, регистрация и авторизация пользователей, прием входящих соединений клиентов, запуск нити обработки
сообщений от клиентов
  метод done - деинициализация и завершение программы
(деинициализация глобальной структуры данных типа map, закрытие клиентских соединений, удаление динамически выделенной памяти,
 остановка ф-ции run1 главного цикла программы с помощью закрытия серверного сокета)

функция run - нить обработки соединения с клиентом(основная функция - читает сообщения от клиента и передает другому клиенту)
                                                                                                    
функция t1  - нить обработки консольных команд серверу. реализует завершение программы вызовом метода done 

Клиент:

класс chatclient
  метод run1 - 
открытие сединения с сервером, регистрация и авторизация пользователей, запуск нити чтения сообщений от клиента,
заполнение структуры данных типа map по данным, отправляемым сервером,
предоставление меню пользователя с командами отправки сообщения, вывода всех сообщений и выхода,
отправка сообщений другим пользователям и вывод всех сообщений по команде

  метод done - деинициализация и завершение программы
(деинициализация глобальной структуры данных типа map, закрытие соединения с сервером, удаление динамически выделенной памяти,
 остановка ф-ции run1 главного цикла программы)

функция run - нить обработки соединения с сервером(основная функция - читает сообщения от сервера и пишет в глобальную стркутуру)


Библиотеки, используемые программами:
вспомогательные перегруженные ф-ции readS и writeS для чтения и записи в файлы и сокеты

библиотека cstdlib - c-шные ф-ции для работы с файлами(fopen, fclose, fgetc и другие)

библиотека mutex - класс std::mutex для создания мьютекса

библиотека thread - класс std::thread для создания нитей

библиотека kkoSemaphore - класс kko::Semaphore - реализация семафора

библиотека kkoSocket - классы kko::Socket (для работы с сетевым соединением), 
                              kko::ServerSocket (для приема входящих соединений), 
                        ф-ция kko::connect (для подключения к серверу)